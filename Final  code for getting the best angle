"""
Created on Mon Jun 24 23:56:54 2024 code voor 1 datapunt met onzekerheid

@author: elwin
"""

import numpy as np
from astropy.io import fits
from astropy.wcs import WCS
from reproject import reproject_interp
from astropy.visualization import ZScaleInterval
import matplotlib.pyplot as plt
from skimage.draw import line
from matplotlib.patches import Polygon
from scipy.optimize import curve_fit

# Paths to the FITS files
fits_files = [
    'C:/Users/elwin/OneDrive/Attachments/Analyse maxim/Project_00/Ha.fits',
    'C:/Users/elwin/OneDrive/Attachments/Analyse maxim/Project_00/O3.fits'
]

# Titles for each image
titles = [
    'Ha',
    'OIII'
]

# Background box coordinates
background_box = (2703, 3459, 2995, 3702)

def data_reduction(data, background_box):
    x1, y1, x2, y2 = background_box
    background_data = data[y1:y2, x1:x2]
    background_median = np.median(background_data)
    return data - background_median

def create_diagonal_box(x1, y1, box_width, box_height, angle):
    angle_rad = np.deg2rad(angle)
    
    # Calculate the coordinates of the box corners
    x2 = x1 + box_width * np.cos(angle_rad)
    y2 = y1 + box_width * np.sin(angle_rad)
    x3 = x2 + box_height * np.cos(angle_rad + np.pi/2)
    y3 = y2 + box_height * np.sin(angle_rad + np.pi/2)
    x4 = x1 + box_height * np.cos(angle_rad + np.pi/2)
    y4 = y1 + box_height * np.sin(angle_rad + np.pi/2)
    
    # Create arrays of the coordinates
    x_coords = np.array([x1, x2, x3, x4, x1])
    y_coords = np.array([y1, y2, y3, y4, y1])
    
    return x_coords, y_coords

def calculate_intensity_profile(data, x_coords, y_coords, box_length):
    intensity_profile = []
    for i in range(box_length):
        x_start = int(x_coords[0] + i * (x_coords[3] - x_coords[0]) / box_length)
        y_start = int(y_coords[0] + i * (y_coords[3] - y_coords[0]) / box_length)
        x_end = int(x_coords[1] + i * (x_coords[2] - x_coords[1]) / box_length)
        y_end = int(y_coords[1] + i * (y_coords[2] - y_coords[1]) / box_length)
        
        rr, cc = line(y_start, x_start, y_end, x_end)
        line_data = data[rr, cc]
        
        median_intensity = np.median(line_data)
        intensity_profile.append(median_intensity)
    
    return np.array(intensity_profile)

def plot_intensity_profiles(data_list, boxes, background_box, box_length):
    colors = ['b', 'g']
    profiles = []
    
    for box_idx, box in enumerate(boxes):
        plt.figure()
        for data_idx, (data, title) in enumerate(zip(data_list, titles)):
            reprojected_data, tgt_wcs = data
            reprojected_data = data_reduction(reprojected_data, background_box)
            x_coords, y_coords = box
            intensity_profile = calculate_intensity_profile(reprojected_data, x_coords, y_coords, box_length)
            normalized_intensity_profile = (intensity_profile - np.min(intensity_profile)) / (np.max(intensity_profile) - np.min(intensity_profile))
            plt.plot(np.arange(len(normalized_intensity_profile)), normalized_intensity_profile, color=colors[data_idx], label=f'{title}')
            profiles.append((title, normalized_intensity_profile, box_idx))
        plt.xlabel('Pixel index along diagonal')
        plt.ylabel('Normalized intensity')
        plt.title(f'Intensity Profiles for Box {box_idx + 1}')
        plt.legend()
        plt.show()
    
    return profiles

def calculate_distance_single_peak(profiles, scale, box_idx):
    ha_profile = next(profile for title, profile, idx in profiles if title == 'Ha' and idx == box_idx)
    oiii_profile = next(profile for title, profile, idx in profiles if title == 'OIII' and idx == box_idx)
    
    ha_peak_index = np.argmax(ha_profile)
    oiii_peak_index = np.argmax(oiii_profile)
    
    distance_pixels = abs(oiii_peak_index - ha_peak_index)
    distance_arcsec = distance_pixels * scale
    
    return distance_pixels, distance_arcsec

def find_optimal_angle(data_list, top_left_coords, background_box, box_width, box_height, box_length, angle_range, angle_step, scale):
    min_avg_distance = float('inf')
    optimal_angle = None
    angle_distances = []
    
    for angle in np.arange(angle_range[0], angle_range[1], angle_step):
        diagonal_boxes = [create_diagonal_box(x, y, box_width, box_height, angle) for x, y in top_left_coords]
        profiles = plot_intensity_profiles(data_list, diagonal_boxes, background_box, box_length)
        
        distance_pixels, distance_arcsec = calculate_distance_single_peak(profiles, scale, 0)  # Only use box 1
        avg_distance_arcsec = distance_arcsec
        
        angle_distances.append((angle, distance_pixels, avg_distance_arcsec))
        
        if avg_distance_arcsec < min_avg_distance:
            min_avg_distance = avg_distance_arcsec
            optimal_angle = angle
    
    return optimal_angle, min_avg_distance, angle_distances

# Open the reference FITS file (first file in the list)
with fits.open(fits_files[0]) as ref_hdu_list:
    ref_hdu = ref_hdu_list[0]
    ref_data = ref_hdu.data.astype(float)  # Ensure data is float
    ref_wcs = WCS(ref_hdu.header)

# Initialize a list to store the reprojected data
reprojected_data_list = []

# Reproject each FITS file to the WCS of the reference image
for file, title in zip(fits_files, titles):
    with fits.open(file) as tgt_hdu_list:
        tgt_hdu = tgt_hdu_list[0]
        tgt_data = tgt_hdu.data.astype(float)  # Ensure data is float
        tgt_wcs = WCS(tgt_hdu.header)
        
        reprojected_data, footprint = reproject_interp((tgt_data, tgt_wcs), ref_wcs, shape_out=ref_data.shape)
        reprojected_data_list.append((reprojected_data, tgt_wcs))

# Example usage of create_diagonal_box
box_width = 14
box_height = 150
box_length = 150  # Length of the diagonal box for intensity profile calculation

# Define top-left corner coordinates of the boxes
top_left_coords = [
    #(2670, 2425) #hoek?
    (1395, 2660) # 20.92
    #(270, 3000) hoek 12.23
    #(754, 3463) hoek 38.22
    #(2535, 1605) hoek 8.05
]

# Find the optimal angle
angle_range = (18, 22)
angle_step = 0.2
scale = 0.43  # arcseconds per pixel

optimal_angle, min_avg_distance, angle_distances = find_optimal_angle(reprojected_data_list, top_left_coords, background_box, box_width, box_height, box_length, angle_range, angle_step, scale)
print(f'Optimal angle: {optimal_angle} degrees')
print(f'Min average distance in arcseconds: {min_avg_distance}')

# Plot all reprojected FITS files with optimal diagonal boxes
diagonal_boxes = [create_diagonal_box(x, y, box_width, box_height, optimal_angle) for x, y in top_left_coords]

plt.figure(figsize=(18, 8))

for i, (data, title) in enumerate(zip(reprojected_data_list, titles)):
    reprojected_data, tgt_wcs = data
    ax = plt.subplot(1, len(fits_files), i + 1, projection=tgt_wcs)
    zscale = ZScaleInterval()
    vmin, vmax = zscale.get_limits(reprojected_data)
    ax.imshow(reprojected_data, origin='lower', cmap='gray', vmin=vmin, vmax=vmax)
    
    # Plot the diagonal boxes
    for x_coords, y_coords in diagonal_boxes:
        poly = Polygon(np.column_stack([x_coords, y_coords]), closed=True, edgecolor='r', facecolor='none', linewidth=1)
        ax.add_patch(poly)
    
    # Add background box
    x1, y1, x2, y2 = background_box
    if x2 <= reprojected_data.shape[1] and y2 <= reprojected_data.shape[0]:
        rect = plt.Rectangle((x1, y1), x2 - x1, y2 - y1, linewidth=1, edgecolor='g', facecolor='none')
        ax.add_patch(rect)
    else:
        print(f"Warning: Background box {background_box} exceeds image dimensions for {title}")
    
    ax.set_title(f'{title} with Analyzed Boxes')
    ax.set_xlabel('RA')
    ax.set_ylabel('Dec')
    
plt.tight_layout()
plt.show()

# Fit a parabola to the distance vs. angle graph and find the minimum
def parabola(x, a, b, c):
    return a * x**2 + b * x + c

filtered_angles = [angle for angle, _, _ in angle_distances]
filtered_distances = [distance for _, _, distance in angle_distances]

popt, pcov = curve_fit(parabola, filtered_angles, filtered_distances)
a, b, c = popt

# The vertex of the parabola (minimum) is at x = -b / (2a)
optimal_angle_parabola = -b / (2 * a)
# Calculate the uncertainty in the optimal angle
optimal_angle_parabola_uncertainty = np.sqrt(pcov[1, 1]) / (2 * a)

print(f'Optimal angle (parabola fit): {optimal_angle_parabola:.2f} degrees')
print(f'Uncertainty in optimal angle: {optimal_angle_parabola_uncertainty:.2f} degrees')


# Plot distance vs. angle graph with the fitted parabola
plt.figure(facecolor='black')
# Add error bars with 0.43 arcseconds as the uncertainty
errors = 0.43
plt.errorbar(filtered_angles, filtered_distances, yerr=errors, fmt='o', color='white', label='Datapunten')
x_fit = np.linspace(min(filtered_angles), max(filtered_angles), 1000)
y_fit = parabola(x_fit, *popt)
plt.plot(x_fit, y_fit, '-', color='white', label='Parabool fit')
plt.xlabel('hoek (graden)', color='white')
plt.ylabel('Afstand (boogseconden)', color='white')
plt.title('Gemiddelde afstanden tegenover de hoek', color='white')
plt.grid(True, color='gray')
plt.legend()

# Change the plot background to black
ax = plt.gca()
ax.set_facecolor('black')
ax.spines['bottom'].set_color('white')
ax.spines['top'].set_color('white')
ax.spines['right'].set_color('white')
ax.spines['left'].set_color('white')
ax.xaxis.label.set_color('white')
ax.yaxis.label.set_color('white')
ax.tick_params(axis='x', colors='white')
ax.tick_params(axis='y', colors='white')

plt.show()
